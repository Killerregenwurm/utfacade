import types
import os
import sys
import string



# The following two methods have been pasted and slightly modified
# from http://www.scons.org/wiki/JavaNativeInterface for a proper
# configuration of the build environment for JNI on all platforms

def walkDirs(path):
    """helper function to get a list of all subdirectories"""
    def addDirs(pathlist, dirname, names):
        """internal function to pass to os.path.walk"""
        for n in names:
            f = os.path.join(dirname, n)
            if os.path.isdir(f):
                pathlist.append(f)
    pathlist = [path]
    os.path.walk(path, addDirs, pathlist)
    return pathlist

def ConfigureJNI(env, java_base):
    """Configure the given environment for compiling Java Native Interface
       c or c++ language files."""

    if not env.get('JAVAC'):
        print "The Java compiler must be installed and in the current path."
        return 0

    if not env.get('JAR'):
        print "The Jar tool must be installed and in the current path."
        return 0

    # first look for a shell variable called JAVA_HOME
    if java_base == None:
        if sys.platform == 'darwin':
            # Apple's OS X has its own special java base directory
            java_base = '/System/Library/Frameworks/JavaVM.framework'
        else:
            # Search for the java compiler
            print "JAVA_HOME is not set. Searching for java... ",
	    jcdirstr = env.WhereIs('javac')
	    if not jcdirstr:
	    	print "not found."
		return 0
            jcdir = os.path.dirname(env.WhereIs('javac'))
            if not jcdir:
                print "not found."
                return 0
            # assuming the compiler found is in some directory like
            # /usr/jdkX.X/bin/javac, java's home directory is /usr/jdkX.X
            java_base = os.path.join(jcdir, "..")
            print "found."

    if sys.platform == 'cygwin':
        # Cygwin and Sun Java have different ideas of how path names
        # are defined. Use cygpath to convert the windows path to
        # a cygwin path. i.e. C:\jdkX.X to /cygdrive/c/jdkX.X
        java_base = string.replace( \
                os.popen("cygpath -up '"+java_base+"'").read(), '\n', '')

    if sys.platform == 'darwin':
        # Apple does not use Sun's naming convention
        java_headers = [os.path.join(java_base, 'Headers')]
        java_libs = [os.path.join(java_base, 'Libraries')]

    if sys.platform.startswith('linux') and java_base == '/usr/bin/..':
        # Special case on Linux: '/usr/bin/javac' provided by 'gcj' is
        # found. Do not add any directories since g++ will find jni.h
        # and jni_md.h in its default include search path. The files
        # are also provided by 'gcj'
	java_headers = []
	java_libs = []
    elif sys.platform.startswith('linux') or sys.platform == 'win32':
        # windows and linux
        java_headers = [os.path.join(java_base, 'include')]
        java_libs = [os.path.join(java_base, 'lib')]
        # Sun's windows and linux JDKs keep system-specific header
        # files in a sub-directory of include
	if java_base == '/usr' or java_base == '/usr/local':
            # too many possible subdirectories. Just use defaults
            java_headers.append(os.path.join(java_headers[0], 'win32'))
            java_headers.append(os.path.join(java_headers[0], 'linux'))
            java_headers.append(os.path.join(java_headers[0], 'solaris'))
        else:
            # add all subdirs of 'include'. The system specific headers
            # Should be in there somewhere
            java_headers = walkDirs(java_headers[0])

    # add Java's include and lib directory to the environment
    env.Append(CPPPATH = java_headers)
    env.Append(LIBPATH = java_libs)

    # add any special platform-specific compilation or linking flags
    if sys.platform == 'darwin':
        env.Append(SHLINKFLAGS = '-dynamiclib -framework JavaVM')
        env['SHLIBSUFFIX'] = '.jnilib'
    elif sys.platform == 'cygwin':
        env.Append(CCFLAGS = '-mno-cygwin')
        env.Append(SHLINKFLAGS = '-mno-cygwin -Wl,--kill-at')

    # Add extra potentially useful environment variables
    env['JAVA_HOME'] = java_base
    env['JNI_CPPPATH'] = java_headers
    env['JNI_LIBPATH'] = java_libs

    return 1



# Add configuration options
Import( 'opts' )
if 'JAVA_HOME' in os.environ:
	opts.Add( 'JAVA_HOME', 'Path to the Java SE Development Kit (assuming default Sun SDK, can also be specified as system environment variable)', os.environ[ 'JAVA_HOME' ] )
else:
	opts.Add( 'JAVA_HOME', 'Path to the Java SE Development Kit (assuming default Sun SDK, can also be specified as system environment variable)' )

if 'JAVA_HOME' in opts:
	java_home = opts[ 'JAVA_HOME' ]
else:
	java_home = None



# Check environment and provide JAVA/JNI build environment
Import( 'masterEnv' )
java_env = masterEnv.Clone()
if ConfigureJNI(java_env, java_home):
	conf = Configure( java_env )
	if conf.CheckHeader( "jni.h" ):
		have_java = True
        else:
            have_java = False
	conf.Finish()
else:
	have_java = False

Export( [ 'have_java', 'java_env' ] )
